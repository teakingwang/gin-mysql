version: '3.8'  # 指定docker-compose文件格式的版本

networks:
  gin:
    external: true

services:

  # 定义web服务
#  web:
#    image: nginx:latest  # 使用官方的nginx镜像
#    container_name: gin-nginx  # 容器的名称
#    ports:
#      - "80:80"  # 将主机的80端口映射到容器的80端口
#    volumes:
#      - ./www:/usr/share/nginx/html  # 将本地的www目录挂载到容器的/usr/share/nginx/html目录
#    networks:
#      - my_network  # 连接到指定的网络

  # 定义数据库服务
  gin-db:
    image: mysql:latest  # 使用官方的mysql镜像
    container_name: gin-mysql  # 容器的名称
    environment:
      MYSQL_ROOT_PASSWORD: 123456  # 设置MySQL的root密码
      MYSQL_DATABASE: user  # 初始化一个名为mydb的数据库
      MYSQL_USER: user  # 创建一个名为user的用户
      MYSQL_PASSWORD: 123456  # 设置user用户的密码
    volumes:
      - /Users/teaking/dbdata/mysql:/var/lib/mysql  # 使用名为db_data的卷来存储数据库数据
    networks:
      - gin  # 连接到指定的网络

  gin-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # 将容器的8080端口映射到主机的8080端口（根据您的Go应用程序实际监听的端口进行调整）
    environment:
      - GO_ENV=production # 您可以根据需要设置环境变量
    restart: unless-stopped # 确保容器在退出时自动重启，除非它被手动停止